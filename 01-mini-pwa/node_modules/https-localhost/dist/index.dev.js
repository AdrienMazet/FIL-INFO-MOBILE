#!/usr/bin/env node
"use strict";

var path = require("path");

var fs = require("fs");

var http = require("http"); // spdy allows http2, while waiting express to support the http2 module


var https = process.env.NODE_ENV === "production" ? require("spdy") : require("https");

var express = require("express");

var cors = require("cors");

var getCerts = require(path.resolve(__dirname, "certs.js")).getCerts;
/* CONFIGURE THE SERVER */
// SSL certificate


var createServer = function createServer() {
  var domain = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.env.HOST || "localhost";
  // create a server with express
  var app = express(); // add CORS headers to all responses

  app.use(cors()); // add getCerts to app

  app.getCerts = getCerts; // override the default express listen method to use our server

  app.listen = function _callee() {
    var port,
        _args = arguments;
    return regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            port = _args.length > 0 && _args[0] !== undefined ? _args[0] : process.env.PORT ||
            /* istanbul ignore next: cannot be tested on Travis */
            443;
            _context.t0 = https;
            _context.next = 4;
            return regeneratorRuntime.awrap(getCerts(domain));

          case 4:
            _context.t1 = _context.sent;
            _context.t2 = app;
            _context.t3 = port;
            app.server = _context.t0.createServer.call(_context.t0, _context.t1, _context.t2).listen(_context.t3);
            console.info("Server running on port " + port + ".");
            return _context.abrupt("return", app.server);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    });
  }; // use gzip compression minify


  if (process.env.NODE_ENV === "production") {
    var compression = require("compression");

    var UglifyJS = require("uglify-js");

    app.use(compression({
      threshold: 1
    }));
    UglifyJS.minify(app);
    app.set("json spaces", 0);
  }
  /* SETUP USEFUL FUNCTIONS */
  // redirect http to https, usage `app.redirect()`


  app.redirect = function () {
    var httpPort = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 80;
    var httpsPort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.env.PORT || 443;
    app.http = http.createServer(function (req, res) {
      var reqHost = req.headers.host ? req.headers.host.replace(":" + httpPort, "") :
      /* istanbul ignore next: cannot be tested */
      "localhost";
      res.writeHead(301, {
        Location: "https://" + reqHost + (httpsPort !== 443 ? ":" + httpsPort : "") + (req.url ||
        /* istanbul ignore next: cannot be tested */
        "")
      });
      res.end();
    }).listen(httpPort);
    console.info("http to https redirection active.");
  }; // serve static content, usage `app.serve([path])`


  app.serve = function () {
    var staticPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();
    var port = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.env.PORT ||
    /* istanbul ignore next: cannot be tested on Travis */
    443;
    app.use(express["static"](staticPath)); // redirect 404 to 404.html or to index.html

    app.use(function (req, res) {
      var p404 = staticPath + "/404.html";
      var index = staticPath + "/index.html"; // istanbul ignore else: not interesting

      if (fs.existsSync(p404)) res.status(404).sendFile(path.resolve(p404));else if (fs.existsSync(index)) res.status(200).sendFile(path.resolve(index));else res.status(404).send(req.path + " not found.");
    });
    console.info("Serving static path: " + staticPath);
    app.listen(port);
  };

  return app;
};
/* MAIN */
// usage: `serve [<path>]` or `node index.js [<path>]`
// istanbul ignore if: cannot be tested


if (require.main === module) {
  var app = createServer(); // retrieve the static path from the process argv or use the cwd
  // 1st is node, 2nd is serve or index.js, 3rd (if exists) is the path

  app.serve(process.argv.length === 3 ? process.argv[2] : process.cwd()); // redirect http to https (only if https port is the default one)

  if (!process.env.PORT) app.redirect();
}
/* istanbul ignore next: cannot be tested */


process.on("uncaughtException", function (err) {
  switch (err.errno) {
    case "EACCES":
      console.error("EACCES: run as administrator to use the default ports 443 and 80. " + "You can also change port with: `PORT=4433 serve ~/myproj`.");
      break;

    case "EADDRINUSE":
      console.error("EADDRINUSE: another service on your machine is using " + "the current port.\nStop it or change port with:" + "`PORT=4433 serve ~/myproj`.");
      break;

    default:
      console.error("Unexpected error " + err.errno + ":\n\n" + err);
      break;
  }

  process.exit(1);
}); // export as module

module.exports = createServer;